import { defaultAbiCoder } from "@ethersproject/abi";
import { keccak256 } from "@ethersproject/keccak256";
import { getCreate2Address } from "@ethersproject/address";
import { keccak256 as solidityKeccak256 } from "@ethersproject/solidity";

const WALLET_FACTORY_SALT = solidityKeccak256(["string"], ["polymarket-wallet-factory"]);
const PROXY_WALLET_BYTECODE =
  "0x608060405234801561001057600080fd5b50610cc1806100206000396000f3fe60806040526004361061003f5760003560e01c806334ee9791146100445780638129fc1c1461006d578063bc197c8114610084578063f23a6e61146100b1575b600080fd5b6100576100523660046108fb565b6100d1565b6040516100649190610ad8565b60405180910390f35b34801561007957600080fd5b506100826101c2565b005b34801561009057600080fd5b506100a461009f3660046107e7565b6101fd565b6040516100649190610ae9565b3480156100bd57600080fd5b506100a46100cc3660046108a4565b61020e565b6060336100dc61021f565b6001600160a01b03161461010b5760405162461bcd60e51b815260040161010290610b08565b60405180910390fd5b815160405190808252806020026020018201604052801561014057816020015b606081526020019060019003908161012b5790505b50905060005b82518110156101bc576000606061016f85848151811061016257fe5b6020026020010151610244565b915091508161019a5761018181610350565b60405162461bcd60e51b81526004016101029190610af7565b808484815181106101a757fe5b60209081029190910101525050600101610146565b50919050565b60006101cc61021f565b6001600160a01b0316146101f25760405162461bcd60e51b815260040161010290610b18565b6101fb3361045d565b565b63bc197c8160e01b95945050505050565b63f23a6e6160e01b95945050505050565b7f734a2a5caf82146a5ddd5263d9af379f9f72724959f0567ddc9df2c40cf2cc205490565b6000606060028351600281111561025757fe5b14156102c85782602001516001600160a01b0316836060015160405161027d9190610ac5565b600060405180830381855af49150503d80600081146102b8576040519150601f19603f3d011682016040523d82523d6000602084013e6102bd565b606091505b50909250905061034b565b6001835160028111156102d757fe5b141561034b5782602001516001600160a01b0316836040015184606001516040516103029190610ac5565b60006040518083038185875af1925050503d806000811461033f576040519150601f19603f3d011682016040523d82523d6000602084013e610344565b606091505b5090925090505b915091565b6060815160001415610396575060408051808201909152601c81527f636170747572656420656d7074792072657665727420627566666572000000006020820152610458565b6308c379a06103b06103ab8460006004610481565b6104aa565b63ffffffff16146103db576040518060600160405280603f8152602001610c40603f91399050610458565b60606103f66103f184600463ffffffff6104bf16565b6104ec565b905080516000141561043d57505060408051808201909152601d81527f636170747572656420656d70747920726576657274206d6573736167650000006020820152610458565b6060818060200190516104539190810190610938565b925050505b919050565b7f734a2a5caf82146a5ddd5263d9af379f9f72724959f0567ddc9df2c40cf2cc2055565b6104896105ad565b6104938484610545565b815260208101919091526040810191909152919050565b8051602082015160009190610453828261054c565b6104c76105ad565b81835110156104d557825191505b6104e3838384865103610481565b90505b92915050565b60208082015160408051828152601f19601f8401168101909301905260609181801561051f576020820181803883390190505b508351909250600061053084610569565b905061053d81838561056f565b505050919050565b0160200190565b6000600180600884021b0380836020038503511691505092915050565b60200190565b5b6020811061058f578151835260209283019290910190601f1901610570565b600180600883602003021b0380845116811984511617845250505050565b60405180606001604052806000815260200160008152602001600081525090565b80356104e681610c12565b600082601f8301126105ea57600080fd5b81356105fd6105f882610b4f565b610b28565b81815260209384019390925082018360005b8381101561063b57813586016106258882610755565b845250602092830192919091019060010161060f565b5050505092915050565b600082601f83011261065657600080fd5b81356106646105f882610b4f565b9150818183526020840193506020810190508385602084028201111561068957600080fd5b60005b8381101561063b578161069f88826107dc565b845250602092830192919091019060010161068c565b600082601f8301126106c657600080fd5b81356106d46105f882610b70565b915080825260208301602083018583830111156106f057600080fd5b6106fb838284610bcc565b50505092915050565b80356104e681610c29565b600082601f83011261072057600080fd5b815161072e6105f882610b70565b9150808252602083016020830185838301111561074a57600080fd5b6106fb838284610bd8565b60006080828403121561076757600080fd5b6107716080610b28565b9050600061077f8484610704565b8252506020610790848483016105ce565b60208301525060406107a4848285016107dc565b604083015250606082013567ffffffffffffffff8111156107c457600080fd5b6107d0848285016106b5565b60608301525092915050565b80356104e681610c36565b600080600080600060a086880312156107ff57600080fd5b600061080b88886105ce565b955050602061081c888289016105ce565b945050604086013567ffffffffffffffff81111561083957600080fd5b61084588828901610645565b935050606086013567ffffffffffffffff81111561086257600080fd5b61086e88828901610645565b925050608086013567ffffffffffffffff81111561088b57600080fd5b610897888289016106b5565b9150509295509295909350565b600080600080600060a086880312156108bc57600080fd5b60006108c888886105ce565b95505060206108d9888289016105ce565b94505060406108ea888289016107dc565b935050606061086e888289016107dc565b60006020828403121561090d57600080fd5b813567ffffffffffffffff81111561092457600080fd5b610930848285016105d9565b949350505050565b60006020828403121561094a57600080fd5b815167ffffffffffffffff81111561096157600080fd5b6109308482850161070f565b60006104e383836109f6565b600061098482610b98565b61098e8185610b9c565b9350836020820285016109a085610569565b8060005b858110156109da57848403895281516109bd858261096d565b94506109c883610569565b60209a909a01999250506001016109a4565b5091979650505050505050565b6109f081610bb0565b82525050565b6000610a0182610b98565b610a0b8185610b9c565b9350610a1b818560208601610bd8565b610a2481610c08565b9093019392505050565b6000610a3982610b98565b610a438185610458565b9350610a53818560208601610bd8565b9290920192915050565b6000610a6a601783610b9c565b7f6d7573742062652063616c6c6564206265206f776e6572000000000000000000815260200192915050565b6000610aa3601383610b9c565b72185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b815260200192915050565b6000610ad18284610a2e565b9392505050565b602080825281016104e38184610979565b602081016104e682846109e7565b602080825281016104e381846109f6565b602080825281016104e681610a5d565b602080825281016104e681610a96565b60405181810167ffffffffffffffff81118282101715610b4757600080fd5b604052919050565b600067ffffffffffffffff821115610b6657600080fd5b5060209081020190565b600067ffffffffffffffff821115610b8757600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b60006104e682610bbd565b6001600160e01b03191690565b6001600160a01b031690565b90565b82818337506000910152565b60005b83811015610bf3578181015183820152602001610bdb565b83811115610c02576000848401525b50505050565b601f01601f191690565b610c1b81610ba5565b8114610c2657600080fd5b50565b60038110610c2657600080fd5b610c1b81610bc956fe6361707475726564206120726576657274206572726f722c2062757420697420646f65736e277420636f6e666f726d20746f20746865207374616e64617264a365627a7a7230582045d8d817563bf1ad2fc12429d13de585835405e2079059db7e3941a7b1bf5b6f6c6578706572696d656e74616cf564736f6c634300050a0040";
const WALLET_IMPLEMENTATION_HASH = keccak256(PROXY_WALLET_BYTECODE);

const getProxyWalletImplementationAddress = (factory: string): string =>
  getCreate2Address(factory, WALLET_FACTORY_SALT, WALLET_IMPLEMENTATION_HASH);

const assembleProxyWalletDeployCode = (factory: string): string => {
  return `0x3d3d606380380380913d393d73${factory
    .substr(2)
    .toLowerCase()}5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73${getProxyWalletImplementationAddress(
    factory,
  )
    .substr(2)
    .toLowerCase()}5af43d82803e903d91602b57fd5bf352e831dd${defaultAbiCoder.encode(["bytes"], ["0x"]).substr(2)}`;
};

/**
 * Calculates the address of a given address's proxywallet
 * @param factory - address of the proxy wallet factory contract
 * @param user - address which owns the proxy wallet we want to calculate the address of
 */
export const getProxyWalletAddress = (factory: string, user: string): string =>
  getCreate2Address(factory, solidityKeccak256(["address"], [user]), keccak256(assembleProxyWalletDeployCode(factory)));
